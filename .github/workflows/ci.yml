name: CI

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  lint:
    name: Lint & Formatting
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ["1.25"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules & golangci cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/.cache/golangci-lint
            ~/.local/share/golangci-lint
            code/backend/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('code/backend/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-
            ${{ runner.os }}-go-

      - name: Ensure dependencies
        working-directory: code/backend
        run: go mod download

      - name: Check formatting (gofmt)
        working-directory: code/backend
        run: |
          unformatted=$(gofmt -l .)
          if [ -n "$unformatted" ]; then
            echo "The following files are not gofmt'ed:";
            echo "$unformatted";
            echo "Run 'gofmt -w .' to fix formatting.";
            exit 1
          fi

      - name: Run go vet
        working-directory: code/backend
        run: go vet ./...

      - name: Install golangci-lint
        run: |
          GO_INSTALL_TARGET="github.com/golangci/golangci-lint/cmd/golangci-lint@latest"
          go install $GO_INSTALL_TARGET

      - name: Run golangci-lint
        working-directory: code/backend
        run: |
          LINT_BIN=$(go env GOPATH)/bin/golangci-lint
          $LINT_BIN --version
          # adjust enabled checks as needed; this set covers many code-smell / structure checks
          $LINT_BIN run --timeout=5m --enable=govet --enable=staticcheck --enable=errcheck --enable=gosimple --enable=gocritic --enable=goconst --enable=ineffassign --enable=dupl

  test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        go-version: ["1.25"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules & build cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            code/backend/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('code/backend/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-
            ${{ runner.os }}-go-

      - name: Ensure dependencies
        working-directory: code/backend
        run: go mod download

      - name: Run tests with coverage
        working-directory: code/backend
        run: |
          # run tests with race detector and produce a coverprofile
          go test -v -race ./... -coverprofile=coverage.out -covermode=atomic

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: code/backend/coverage.out

      - name: Summary
        if: failure()
        run: |
          echo "One or more checks failed. Review the logs above to see test/lint failures."
